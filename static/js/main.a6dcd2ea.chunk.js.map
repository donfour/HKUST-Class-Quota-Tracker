{"version":3,"sources":["queries/queries.js","components/Graph.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["getCourseQuery","gql","_templateObject","LINE_COLORS","ITEMS","title","color","Graph","state","show_avail","show_enrol","show_quota","show_wait","lastDrawLocation","_ref","this","setState","prevState","line_series","_this$state","_this$props$section","props","section","avail_values","enrol_values","quota_values","wait_values","section_name","section_id","push","react_default","a","createElement","es","opacity","data","map","obj","x","parseInt","timestamp","y","value","_this2","_this$props$section2","className","concat","orientation","items","onItemClick","toggle_show","bind","yPadding","xType","width","height","margin","bottom","xDomain","left","right","yDomain","top","render_line_series","style","fill","tickLabelAngle","onBrushEnd","area","onDrag","_ref2","onClick","React","Component","Main","input","react_apollo_esm","query","variables","course_code","pollInterval","loading","error","onChange","e","target","placeholder","message","course","length","i","Graph_Graph","key","href","rel","client","ApolloClient","uri","App","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6dcd2ea.chunk.js","sourcesContent":["// GraphQL queries\nimport { gql } from 'apollo-boost';\n\nconst getCourseQuery = gql`\nquery GetCourseQuery($course_code: String!){\n\tcourse(course_code: $course_code){\n    course_code\n    data {\n      section_id\n      section_name\n      wait_values {\n        timestamp\n        value\n      }\n      enrol_values {\n        timestamp\n        value\n      }\n      avail_values {\n        timestamp\n        value\n      }\n      quota_values {\n        timestamp\n        value\n      }\n    }\n  }\n}\n`;\n\nexport { getCourseQuery };","import React from 'react';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    LineSeries,\n    Highlight,\n    Borders,\n    DiscreteColorLegend\n  } from 'react-vis';\n  \nimport '../../node_modules/react-vis/dist/style.css';\n\nconst LINE_COLORS = {\n    'quota': '#393B46',\n    'avail': '#88d8b0',\n    'enrol': '#29A4DE',\n    'wait': '#ff6f69'\n}\n\nconst ITEMS = [\n    { title: 'Quota', color: LINE_COLORS.quota },\n    { title: 'Enrol', color: LINE_COLORS.enrol },\n    { title: 'Avail', color: LINE_COLORS.avail},\n    { title: 'Wait', color: LINE_COLORS.wait}\n];\n\nexport default class Graph extends React.Component {\n    state = {\n        show_avail: true,\n        show_enrol: true,\n        show_quota: true,\n        show_wait: true,\n        lastDrawLocation: null\n    }\n\n    toggle_show({title}){\n        switch(title){\n            case 'Quota': \n            this.setState(prevState => ({show_quota: !prevState.show_quota}));\n            break;\n            case 'Enrol': \n            this.setState(prevState => ({show_enrol: !prevState.show_enrol}));\n            break;\n            case 'Avail': \n            this.setState(prevState => ({show_avail: !prevState.show_avail}));\n            break;\n            case 'Wait': \n            this.setState(prevState => ({show_wait: !prevState.show_wait}));\n            break;\n        }\n    }\n\n    render_line_series(){\n        const line_series = [];\n        const {show_avail, show_enrol, show_quota, show_wait} = this.state;\n        const { avail_values, enrol_values, quota_values, wait_values, section_name, section_id } = this.props.section;\n\n        if(show_avail){\n            line_series.push(\n                <LineSeries\n                    opacity={0.7}\n                    color={LINE_COLORS.avail}\n                    data={avail_values.map(obj => ({ x: parseInt(obj.timestamp), y: parseInt(obj.value) }))}\n                />\n            )\n        }\n\n        if(show_enrol){\n            line_series.push(\n                <LineSeries\n                    opacity={0.7}\n                    color={LINE_COLORS.enrol}\n                    data={enrol_values.map(obj => ({ x: parseInt(obj.timestamp), y: parseInt(obj.value) }))}\n                />\n            )\n        }\n\n        if(show_quota){\n            line_series.push(\n                <LineSeries\n                    opacity={0.7}\n                    color={LINE_COLORS.quota}\n                    data={quota_values.map(obj => ({ x: parseInt(obj.timestamp), y: parseInt(obj.value) }))}\n                />\n            )\n        }\n\n        if(show_wait){\n            line_series.push(\n                <LineSeries\n                    opacity={0.7}\n                    color={LINE_COLORS.wait}\n                    data={wait_values.map(obj => ({ x: parseInt(obj.timestamp), y: parseInt(obj.value) }))}\n                />\n            )\n        }\n\n        return line_series;\n    }\n\n    render(){\n        const { section_name, section_id } = this.props.section;\n        const { lastDrawLocation } = this.state;\n        return (\n            <div className='graph_container'>\n                <div>{`${section_name} (${section_id})`}</div>\n                <div>\n                    <DiscreteColorLegend orientation=\"horizontal\" items={ITEMS} onItemClick={this.toggle_show.bind(this)}/>\n                    <XYPlot\n                        yPadding={10}\n                        xType=\"time\"\n                        width={700}\n                        height={300}\n                        margin={{bottom: 55}}\n                        xDomain={\n                            lastDrawLocation && [\n                                lastDrawLocation.left,\n                                lastDrawLocation.right\n                            ]\n                        }\n                        yDomain={\n                            lastDrawLocation && [\n                                lastDrawLocation.bottom,\n                                lastDrawLocation.top\n                            ]\n                        }\n                    >\n                        <HorizontalGridLines />\n                        <VerticalGridLines />\n                        {this.render_line_series()}\n                        <Borders style={{\n                            bottom: {fill: '#fff'},\n                            left: {fill: '#fff'},\n                            right: {fill: '#fff'},\n                            top: {fill: '#fff'}\n                        }}/>\n                        <XAxis tickLabelAngle={-90}/>\n                        <YAxis />\n                        <Highlight\n                            onBrushEnd={area => this.setState({lastDrawLocation: area})}\n                            onDrag={area => {\n                                this.setState(({lastDrawLocation}) => ({\n                                    lastDrawLocation: {\n                                        bottom: lastDrawLocation.bottom + (area.top - area.bottom),\n                                        left: lastDrawLocation.left - (area.right - area.left),\n                                        right: lastDrawLocation.right - (area.right - area.left),\n                                        top: lastDrawLocation.top + (area.top - area.bottom)\n                                    }\n                                }));\n                            }}\n                        />\n                    </XYPlot>\n                </div>\n                <div>\n                    <button\n                        onClick={() => this.setState({lastDrawLocation: null})}\n                        className='reset_zoom_btn'\n                    >\n                        Reset Zoom\n                    </button>\n                </div>\n            </div>\n        );\n    }\n};","import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport { getCourseQuery } from '../queries/queries';\n\n// components\nimport Graph from './Graph';\n\nconst TEN_MINUTES_IN_MS = 600000;\n\nexport default class Main extends Component{\n    state = {\n        input: 'MATH1012'\n    }\n    render(){\n        return (\n            <Query\n                query={ getCourseQuery }\n                variables={{ course_code: this.state.input }}\n                pollInterval={TEN_MINUTES_IN_MS}\n            >\n                    {({ loading, error, data }) => {\n                        return (\n                            <div className='app'>\n                                <h1 className='title'>HKUST Class Quota Tracker (Winter 2018)</h1>\n                                <p className='instruction'>\n                                    Type in a course code to search. Drag on the charts to zoom in. Click on legend to hide / show lines. <br/>\n                                    It might take 5-10 seconds to load at first, as the server goes to sleep after being idle for a while.\n                                </p>\n                                <input\n                                    className='searchbar'\n                                    onChange={e => this.setState({input: e.target.value })}\n                                    placeholder={'Search for a course'}\n                                />\n                                {\n                                    error ? `Error! ${error.message}` :\n                                    loading ? \"Loading...\" :\n                                    <div>\n                                        <div className='course_code'>{data.course.course_code}</div>\n                                        {\n                                            data.course.data.length !== 0 ?\n                                            data.course.data.map((section, i) => <Graph key={i} section={section}/>) :\n                                            'Course not found!'\n                                        }\n                                    </div>\n                                }\n                                <p className='description'>This app srapes the <a target='_blank' href='https://w5.ab.ust.hk/wcq/cgi-bin/' rel='noopener noreferrer'>HKUST Class Quota</a> page every 10 minutes and keeps track of the availability of all courses. Is it useful? Debatable. But isn't it fun to see people get rekt by the SOSC1980 waitlist?</p>\n                            </div>\n                        )\n                    }}\n            </Query>\n        )\n    }\n};","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// components\nimport Main from './components/Main';\n\n// style\nimport './App.css';\n\n// const uri = process.env.NODE_ENV === 'production' ? 'https://fierce-ocean-63227.herokuapp.com/graphql' : 'http://localhost:4000/graphql'\n\n// apollo client setup\nconst client = new ApolloClient({\n    uri: 'https://fierce-ocean-63227.herokuapp.com/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n        <ApolloProvider client={client}>\n            <Main/>\n        </ApolloProvider>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}